package mog;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ListModel;
import net.contentobjects.jnotify.JNotify;
import net.contentobjects.jnotify.JNotifyException;
import net.contentobjects.jnotify.JNotifyListener;

import javax.sound.sampled.*;
import javax.swing.JDialog;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ListModel;

public class Mog extends javax.swing.JFrame {
    
    private File soundFile;
    private AudioInputStream audioIn;
    private javax.sound.sampled.Clip clip;
    private int tamanho;
    private int e_play = 0;
    private double instanteDaMusica;
    /**
     * Creates new form Main
     */
    public Mog() {
        initComponents();
    }
    
    public class Atualizador implements Runnable{
        @Override
        public void run() {
            while(jSlider1.getValue() != tamanho)
            {
                //System.out.println(jSlider1.getValue());
                jSlider1.setValue(Integer.parseInt(String.valueOf(clip.getMicrosecondPosition()).toString()));
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSlider1 = new javax.swing.JSlider();

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Arquivos em mogShare");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jButton2.setText("Play");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("Stop");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Adicionar um arquivo (digite o nome exato):");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jSlider1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jSlider1MouseDragged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 6, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed

        int key = evt.getKeyCode();
        if( key == KeyEvent.VK_ENTER ){
            ArrayList<String> al = new ArrayList<String>();
            ListModel lm = jList1.getModel();
            int lsize = lm.getSize();
            for (int i=0; i<lsize; i++) {
                al.add( (String) lm.getElementAt(i) );
            }

            JTextField source = (JTextField) evt.getSource();
            String termobusca = source.getText();
            source.setText("");
            if ( al.indexOf(termobusca) == -1 ) {
                mogP2PController.pesquisar(termobusca);
            }
            else {
                System.out.println( termobusca+" ja existe na lista" );
            }
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        e_play = 0;
        clip.stop();
        jButton2.setLabel("Play");
        clip.setMicrosecondPosition(0);
        jSlider1.setValue(0);
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
try
        {
            
            if(e_play == 0)
            {
                jSlider1.setValue(0);
                soundFile = new File("mogShare/"+jList1.getSelectedValue());
                audioIn = AudioSystem.getAudioInputStream(soundFile);
                
                clip = AudioSystem.getClip();
                clip.stop();
                clip.open(audioIn);
                tamanho = Integer.parseInt(String.valueOf(clip.getMicrosecondLength()).toString());
                jSlider1.setMaximum(tamanho);
                clip.setMicrosecondPosition(0);
                clip.start();
                jButton2.setLabel("Pause");
                new Thread(new Atualizador()).start();
                e_play = 1;
            }
            else if(e_play == 1)
            {
                instanteDaMusica = clip.getMicrosecondPosition();
                jButton2.setLabel("Play");
                e_play = 2;
                clip.stop();
            }
            else if(e_play == 2)
            {
                clip.setMicrosecondPosition((long) instanteDaMusica);
                clip.start();
                jButton2.setLabel("Pause");
                e_play = 1;
            }
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jSlider1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider1MouseDragged
        clip.setMicrosecondPosition(jSlider1.getValue());
    }//GEN-LAST:event_jSlider1MouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Mog().iniciar(args.length==1?args[0]:null);
            }
        });
    }
    
    //Minha declaração de variáveis
    MogP2PController mogP2PController;
    int watchID;
    
    //Minha declaração de métodos
    private void iniciar(String arg) {
        
        mogP2PController = new MogP2PController(arg);
        
        File f = new File(MogP2PController.mogShare);
        String path = null;
        try {
            path = f.getCanonicalFile().getAbsolutePath();
        } catch (IOException ex) {
            Logger.getLogger(Mog.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(path);
        atualizarLista();
        /**/
        int mask = JNotify.FILE_ANY;
        boolean watchSubtree = true;
        try {
            watchID = JNotify.addWatch(
                    path, 
                    mask, 
                    watchSubtree,
                    new JNotifyListener() {

                @Override
                public void fileCreated(int i, String string, String string1) {
                    atualizarLista();
                }

                @Override
                public void fileDeleted(int i, String string, String string1) {
                    atualizarLista();
                }

                @Override
                public void fileModified(int i, String string, String string1) {
                    atualizarLista();
                }

                @Override
                public void fileRenamed(int i, String string, String string1, String string2) {
                    atualizarLista();
                }
            } );
        } catch (JNotifyException ex) {
            Logger.getLogger(Mog.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        mogP2PController.iniciar();
        
        JDialog list1 = new JDialog();
        list1.setTitle("Lista 1");
        JScrollPane sp1 = new JScrollPane( mogP2PController.getJList1() );
        list1.add( sp1 );
        list1.setSize(300, 300);
        list1.setLocation(this.getWidth(), 0);
        
        JDialog list2 = new JDialog();
        list2.setTitle("Lista 2");
        JScrollPane sp2 = new JScrollPane( mogP2PController.getJList2() );
        list2.add( sp2 );
        list2.setSize(300, 300);
        list2.setLocation(this.getWidth()+300, 0);
        
        this.setVisible(true);
        list1.setVisible(true);
        list2.setVisible(true);
        /**/
    }
    
    private void atualizarLista() {
        File folder = new File(MogP2PController.mogShare);
        @SuppressWarnings("MismatchedReadAndWriteOfArray")
        File[] listOfFiles = folder.listFiles();
        int flist_length = listOfFiles.length;
        final ArrayList<String> strings = new ArrayList<String>();
        for (int i=0; i<flist_length; i++) {
            if ( listOfFiles[i].isFile() ) {
                strings.add( listOfFiles[i].getName() );
            }
        }
        jList1.setModel(new javax.swing.AbstractListModel() {
            ArrayList<String> str = new ArrayList<String>(strings);
            @Override
            public int getSize() {
                return str.size();
            }
            @Override
            public Object getElementAt(int i) {
                return str.get(i);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
